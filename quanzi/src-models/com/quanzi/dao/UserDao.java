package com.quanzi.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.quanzi.entities.City;
import com.quanzi.entities.Province;
import com.quanzi.entities.School;

import com.quanzi.entities.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "USER_ID");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Gender = new Property(2, String.class, "gender", false, "GENDER");
        public final static Property Tel = new Property(3, String.class, "tel", false, "TEL");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Large_avatar = new Property(5, String.class, "large_avatar", false, "LARGE_AVATAR");
        public final static Property Small_avatar = new Property(6, String.class, "small_avatar", false, "SMALL_AVATAR");
        public final static Property Introduce = new Property(7, String.class, "introduce", false, "INTRODUCE");
        public final static Property Identity = new Property(8, String.class, "identity", false, "IDENTITY");
        public final static Property Love_state = new Property(9, String.class, "love_state", false, "LOVE_STATE");
        public final static Property Age = new Property(10, Integer.class, "age", false, "AGE");
        public final static Property Birthday = new Property(11, java.util.Date.class, "birthday", false, "BIRTHDAY");
        public final static Property SchoolID = new Property(12, long.class, "schoolID", false, "SCHOOL_ID");
        public final static Property CityID = new Property(13, long.class, "cityID", false, "CITY_ID");
        public final static Property ProvinceID = new Property(14, long.class, "provinceID", false, "PROVINCE_ID");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'USER_ID' INTEGER PRIMARY KEY ," + // 0: user_id
                "'NICKNAME' TEXT," + // 1: nickname
                "'GENDER' TEXT," + // 2: gender
                "'TEL' TEXT," + // 3: tel
                "'EMAIL' TEXT," + // 4: email
                "'LARGE_AVATAR' TEXT," + // 5: large_avatar
                "'SMALL_AVATAR' TEXT," + // 6: small_avatar
                "'INTRODUCE' TEXT," + // 7: introduce
                "'IDENTITY' TEXT," + // 8: identity
                "'LOVE_STATE' TEXT," + // 9: love_state
                "'AGE' INTEGER," + // 10: age
                "'BIRTHDAY' INTEGER," + // 11: birthday
                "'SCHOOL_ID' INTEGER NOT NULL ," + // 12: schoolID
                "'CITY_ID' INTEGER NOT NULL ," + // 13: cityID
                "'PROVINCE_ID' INTEGER NOT NULL );"); // 14: provinceID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(3, gender);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String large_avatar = entity.getLarge_avatar();
        if (large_avatar != null) {
            stmt.bindString(6, large_avatar);
        }
 
        String small_avatar = entity.getSmall_avatar();
        if (small_avatar != null) {
            stmt.bindString(7, small_avatar);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(8, introduce);
        }
 
        String identity = entity.getIdentity();
        if (identity != null) {
            stmt.bindString(9, identity);
        }
 
        String love_state = entity.getLove_state();
        if (love_state != null) {
            stmt.bindString(10, love_state);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(11, age);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(12, birthday.getTime());
        }
        stmt.bindLong(13, entity.getSchoolID());
        stmt.bindLong(14, entity.getCityID());
        stmt.bindLong(15, entity.getProvinceID());
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // large_avatar
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // small_avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduce
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // identity
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // love_state
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // age
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // birthday
            cursor.getLong(offset + 12), // schoolID
            cursor.getLong(offset + 13), // cityID
            cursor.getLong(offset + 14) // provinceID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLarge_avatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSmall_avatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduce(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdentity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLove_state(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAge(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBirthday(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSchoolID(cursor.getLong(offset + 12));
        entity.setCityID(cursor.getLong(offset + 13));
        entity.setProvinceID(cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSchoolDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getCityDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProvinceDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN SCHOOL T0 ON T.'SCHOOL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN CITY T1 ON T.'CITY_ID'=T1.'_id'");
            builder.append(" LEFT JOIN PROVINCE T2 ON T.'PROVINCE_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        School school = loadCurrentOther(daoSession.getSchoolDao(), cursor, offset);
         if(school != null) {
            entity.setSchool(school);
        }
        offset += daoSession.getSchoolDao().getAllColumns().length;

        City city = loadCurrentOther(daoSession.getCityDao(), cursor, offset);
         if(city != null) {
            entity.setCity(city);
        }
        offset += daoSession.getCityDao().getAllColumns().length;

        Province province = loadCurrentOther(daoSession.getProvinceDao(), cursor, offset);
         if(province != null) {
            entity.setProvince(province);
        }

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
